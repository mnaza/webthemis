<html>
<head>
  <script src="themis-raw.js"></script>
  <script src="secure_session_client.js"></script>
</head>
<body>
  <script>
    var SYSLOG;
    
    function $(o){
       return document.getElementById(o);
    }

    function _body(){
      return document.getElementsByTagName('body')[0];
    }

    function _node(n){
      return document.createElement(n);
    }
    
    function _log(m){
       if(!m) return false;
       SYSLOG = SYSLOG || _body().appendChild( _node('textarea'));
       SYSLOG.value = m + '\n' +SYSLOG.value;
    }
  </script>
  <script>
    function res_buf(length){
       this.length_ = _malloc(4);
       this.address_ = _malloc(length);
       setValue(this.length_, length, "i32", true);
    }

    res_buf.prototype.length = function(){
       this.length_
    }
    
    function param_buf(data){
        var address=_malloc(data.length+1);
        stringToAscii(data, address);
        setValue(address+data.length, 0, "i8", true);
        return address;
    }

    function get_bytes(address, length){
       var res = new Uint8Array(length);
       res.set(HEAPU8.subarray(address, address+length));
       return res;
    }
    
//    Module._main = function() {    

/*    var gen_key_func=Module.cwrap('gen_key','string',[]);
    var secure_session_create=Module.cwrap('secure_session_client_create','pointer',['string', 'string', 'string', 'string']);
    var secure_session_destroy=Module.cwrap('secure_session_client_destroy','number',['number']);
    
    var client_pair = gen_key_func().split(' ');
    var server_pair = gen_key_func().split(' ');
    var client_session = secure_session_create('client', client_pair[0], "server", server_pair[1]);
    _log(client_session);
    var server_session = secure_session_create('server', server_pair[0], "client", client_pair[1]);
    _log(server_session);
    
    
    
    var c_u=new res_buf(1024);
    var a = _secure_session_client_connect_request(client_session, c_u.address_, c_u.length_);
    _log('1. cient connect request ' + a + ' ' + getValue(c_u.length_, 'i32', true));

    var s_u = new res_buf(1024);
    a = _secure_session_client_unwrap(server_session, c_u.address_, getValue(c_u.length_, 'i32', true), s_u.address_, s_u.length_);
    _log('1.   server unwrap ' + a + ' ' + getValue(s_u.length_, 'i32', true));

    setValue(c_u.length_, 1024, "i32", true);
    a = _secure_session_client_unwrap(client_session, s_u.address_, getValue(s_u.length_, 'i32', true), c_u.address_, c_u.length_);
    _log('2. client unwrap ' + a + ' ' + getValue(c_u.length_, 'i32', true));

    setValue(s_u.length_, 1024, "i32", true);
    a = _secure_session_client_unwrap(server_session, c_u.address_, getValue(c_u.length_, 'i32', true), s_u.address_, s_u.length_);
    _log('2.   server unwrap ' + a + ' ' + getValue(s_u.length_, 'i32', true));

    setValue(c_u.length_, 1024, "i32", true);
    a = _secure_session_client_unwrap(client_session, s_u.address_, getValue(s_u.length_, 'i32', true), c_u.address_, c_u.length_);
    _log('3. client unwrap ' + a + ' ' + getValue(c_u.length_, 'i32', true));


    var msg_str = "Test message";
    var msg = param_buf(msg_str);
    setValue(c_u.length_, 1024, "i32", true);
    a = _secure_session_client_wrap(client_session, msg, msg_str.length+1, c_u.address_, c_u.length_);
    _log('4. client wrap ' + a + ' ' + getValue(c_u.length_, 'i32', true));

    setValue(s_u.length_, 1024, "i32", true);
    a = _secure_session_client_unwrap(server_session, c_u.address_, getValue(c_u.length_, 'i32', true), s_u.address_, s_u.length_);
    _log('4.   server unwrap ' + a + ' ' + getValue(s_u.length_, 'i32', true)+ ' ' + Pointer_stringify(s_u.address_));

    _free(msg);
    
    


    
    a=secure_session_destroy(client_session);
    _log(a);
    a=secure_session_destroy(server_session);
    _log(a);
    */
    var gen_key_func=Module.cwrap('gen_key','string',[]);
    var client_pair = gen_key_func().split(' ');
    var server_pair = gen_key_func().split(' ');
    var session = new secure_session_client('ws://127.0.0.1:8081/ws', 'client', client_pair[0], 'server', server_pair[1]);

    session.onOpen = function(){
         _log('session is open');
    }

    session.onClose = function(event){
         _log('session is close');
    }

    session.onMessage = function(msg){
         _log('msg: '+msg);         
    }

    session.onError = function(error){
         _log('error: '+error.message);
    }
    //}
  </script>
</body>
</html>
